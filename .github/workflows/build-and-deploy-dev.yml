name: Build and deploy development

on:
  push:
    branches:
      - develop
      - feature/MU-22-imporove-documentation
    paths:
      - src
      - .github/workflows/build-and-deploy-dev.yml

  workflow_dispatch:

env:
  JAR_NAME: backend
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CONTAINER_NAME: ${{ github.event.repository.name }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src
    outputs:
      image_path: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "maven"

      - name: Install 1Password CLI
        uses: 1password/install-cli-action@v1

      - name: Load secret
        id: op-load-secret
        uses: 1password/load-secrets-action@v1
        with:
          export-env: false
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          PAT_GITHUB_TOKEN: op://mentorus/github-pat-publish-package/token

      - name: Inject secret with 1Password
        run: |
          export OP_SERVICE_ACCOUNT_TOKEN=${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          APP_ENV=dev op inject -i ./src/main/resources/application.yml.tpl -o ./src/main/resources/application.yml

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Rename jar file to app.jar
        run: mv "target/$JAR_NAME-$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout).jar" "target/app.jar"

      - name: Login to github package
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ steps.op-load-secret.outputs.PAT_GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push to github package
        uses: docker/build-push-action@v4
        with:
          context: ./src
          file: ./src/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   steps:
  #     - name: Load secret
  #       id: op-load-secret
  #       uses: 1password/load-secrets-action@v1
  #       with:
  #         export-env: false
  #       env:
  #         OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
  #         SERVER_HOST: "op://mentorus/secret/server/dev-server-host"
  #         SERVER_USERNAME: "op://mentorus/secret/server/dev-server-username"
  #         SERVER_SSHKEY: "op://mentorus/rsa-development-server/private key"
  #         PAT_GITHUB_TOKEN: op://mentorus/github-pat-publish-package/token

  #     - name: Deploy to digital ocean droplet via ssh action
  #       uses: appleboy/ssh-action@v1.0.0
  #       with:
  #         script_stop: true
  #         host: ${{ steps.op-load-secret.outputs.SERVER_HOST }}
  #         username: ${{ steps.op-load-secret.outputs.SERVER_USERNAME }}
  #         key: ${{ steps.op-load-secret.outputs.SERVER_SSHKEY }}
  #         envs: ${{ steps.op-load-secret.outputs.PAT_GITHUB_TOKEN }}, ${{ github.actor }}, ${{ env.CONTAINER_NAME }},
  #         script: |
  #           # Login to Github Packages
  #           echo ${{ steps.op-load-secret.outputs.PAT_GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
  #           # Stop and remove the container if running
  #           docker stop ${{ env.CONTAINER_NAME }} || true && docker rm ${{ env.CONTAINER_NAME }} || true
  #           # Remove image
  #           docker image rm ${{ needs.build-and-push.outputs.image_path }} || true
  #           # Run container
  #           docker run -d \
  #             --restart always \
  #             --name $(echo ${{ env.CONTAINER_NAME }}-test) \
  #             --add-host host.docker.internal:host-gateway \
  #             -p 7000:8080 \
  #             -p 7001:8085 \
  #             ${{ needs.build-and-push.outputs.image_path }}
